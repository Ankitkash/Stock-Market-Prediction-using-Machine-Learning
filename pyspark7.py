# -*- coding: utf-8 -*-
"""PySpark7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U8VEoxRln_82FMVe7mDINeO3YdDrH8Gh
"""

from google.colab import files
uploaded = files.upload()

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName('LinearRegression').getOrCreate()

spark

df = spark.read.csv('tips.csv', header=True, inferSchema=True)

df.show()

df.show(10)

# For getting all rows
#df.collect()

df.columns

# Take top n rows
df.take(5)

df.printSchema()

df.columns

# Handling categorical features
from pyspark.ml.feature import StringIndexer

indexer = StringIndexer(inputCol='sex', outputCol='sex_indexed')
df_r = indexer.fit(df).transform(df)
df_r.show()

indexer = StringIndexer(inputCols=['smoker', 'day', 'time'], outputCols=['smoker_indexed', 'day_indexed', 'time_index'])
df_r = indexer.fit(df_r).transform(df_r)
df_r.show()

from pyspark.ml.feature import VectorAssembler
featureassembler = VectorAssembler(inputCols=['tip', 'size', 'sex_indexed', 'smoker_indexed', 'day_indexed', 'time_index'], outputCol='Independent Features')
output = featureassembler.transform(df_r)

output.show()

output.select('Independent Features').show()

finalized_data = output.select('Independent Features', 'total_bill')    # total_bill ----> Dependent feature

finalized_data.show()

from pyspark.ml.regression import LinearRegression
# train test split
train_data, test_data = finalized_data.randomSplit([0.75, 0.25])
regressor = LinearRegression(featuresCol='Independent Features', labelCol= 'total_bill')
regressor = regressor.fit(train_data)

regressor.coefficients    # here we have 6 features so we will have 6 coefficients

regressor.intercept  # In y = m*x + c, c---> intercept

# Predictions
pred_results = regressor.evaluate(test_data)

# Final Comparision
pred_results.predictions.show()

# Performance metrics
pred_results.r2, pred_results.meanAbsoluteError, pred_results.meanSquaredError
# Absolute means |y - y'| and squared means (y - y')^2 where y ---> actual value and y' ---> predicted value

data = pred_results.predictions.select('Independent Features', 'total_bill', 'prediction').collect()
features = [row['Independent Features'][0] for row in data]
actual = [row['total_bill'] for row in data]
predicted = [row['prediction'] for row in data]

sorted_data = sorted(zip(features, actual, predicted))
features_sorted, actual_sorted, predicted_sorted = zip(*sorted_data)

import matplotlib.pyplot as plt

plt.scatter(features, actual, color = 'blue', label = 'Actual')
plt.plot(features, predicted, color = 'red', label = 'Predicted', linewidth = 2)

plt.xlabel('Independent Features')
plt.ylabel('total_bill')
plt.title('Actual vs Predicted - Regression')
plt.legend()
plt.show()

